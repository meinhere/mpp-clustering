# -*- coding: utf-8 -*-
"""ABD Project - KMeans Clustering MPP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3-VMqWKoHLlQRgg4jmHFceAYpcfYQ-s

# ABD Project : K-Means Clustering MPP

Project AKhir Analisa Big Data (ABD) ini diminta untuk melakukan proses pengelompokkan data Margin Perdagangan dan Pengangkutan (MPP) menggunakan K-Means pada seluruh provinsi di Indonesia.

Dibuat Oleh:

*   Nama : Sabil Ahmad Hidayat
*   NIM : 220411100058
*   Kelas : BIG DATA B

Link Code : https://colab.research.google.com/drive/1k3-VMqWKoHLlQRgg4jmHFceAYpcfYQ-s?usp=sharing

Link Github : https://github.com/meinhere/abd-project

## Import Library
"""

# basic library
import numpy as np
import pandas as pd

# preprocessing and modeling
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# ploting
import matplotlib.pyplot as plt
import folium
import geopandas as gpd

"""## Exploratory Data

### Load Data
"""

# Load dataset
main_df = pd.read_csv('https://raw.githubusercontent.com/meinhere/mpp-clustering/refs/heads/master/dataset/main.csv', delimiter=",")

main_df

"""### Data Info"""

main_df.info()

"""### Data Describe"""

main_df.describe()

"""## Data Preprocessing

### Drop rows and columns
"""

# Drop rows 0 and 1
main_df = main_df.drop([0, 1, 2], axis=0)
main_df = main_df.reset_index(drop=True)

# Rename columns 2021 and 2019
name_columns = {
    '38 Provinsi': 'Provinsi',
    'Unnamed: 1': '2021',
    'Unnamed: 2': '2019',
    'Unnamed: 3': '2018',
    'Unnamed: 4': '2017'
}
main_df = main_df.rename(columns=name_columns)

# Drop column Unnamed 5 - 8
main_df.drop(columns=['Unnamed: 5', 'Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8'], inplace=True)

main_df.head()

"""### Normalization"""

main_df['2021'] = pd.to_numeric(main_df['2021'], errors='coerce')

main_df.info()

# Function to perform k-means clustering
def perform_kmeans(selected_columns):
    selected_features = main_df[list(selected_columns)]

    # Feature scaling (if more than one column selected)
    if len(selected_features.columns) > 1:
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(selected_features)
    else:
        scaled_data = selected_features.values

    df = selected_features
    return df, scaled_data

# Example usage:
selected_columns = main_df.columns.tolist()[1:2] # one column
selected_columns = main_df.columns.tolist()[1:4] # more than one column
features, features_scaled = perform_kmeans(selected_columns)

print(selected_columns)

"""## Clustering

### Elbow Method
"""

# implement elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(features_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(10, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters (k)')
plt.ylabel('WCSS')
plt.show()

"""### K-Means Clustering"""

# kmeans clustering
K = 3 # Replace with your optimal number
kmeans = KMeans(n_clusters=K, init='k-means++', max_iter=300, n_init=10, random_state=42)
cluster_labels = kmeans.fit_predict(features_scaled)

# Add cluster labels to your original dataframe
features['Cluster'] = cluster_labels
features

"""## Ploting

### Scatter Plot
"""

# Function to perform k-means clustering and plotting
def plot(selected_columns, selected_features, scaled_data, n_clusters=3):
    # Plotting
    if len(selected_features.columns) > 2 :
        pca = PCA(n_components=2)
        principal_components = pca.fit_transform(scaled_data)
        pca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])
        pca_df['Cluster'] = selected_features['Cluster']
        plt.figure(figsize=(8, 6))
        for cluster in pca_df['Cluster'].unique():
            cluster_data = pca_df[pca_df['Cluster'] == cluster]
            plt.scatter(cluster_data['PC1'], cluster_data['PC2'], label=f'Cluster {cluster}')
        plt.xlabel('Principal Component 1')
        plt.ylabel('Principal Component 2')
        plt.title('PCA Plot of Clusters')
        plt.legend()
    else:
        plt.figure(figsize=(8,6))
        for cluster in selected_features['Cluster'].unique():
          cluster_data = selected_features[selected_features['Cluster'] == cluster]
          plt.scatter(cluster_data.index, cluster_data[selected_columns[0]], label=f'Cluster {cluster}')
        plt.xlabel("Index")
        plt.ylabel(selected_columns[0])
        plt.title(f'Cluster Plot for {selected_columns[0]}')
        plt.legend()

    plt.show()

plot(selected_columns, features, features_scaled)

"""### Ploting into Map"""

# 1. Load GeoJSON file untuk peta Indonesia
geojson_file = "https://raw.githubusercontent.com/meinhere/mpp-clustering/refs/heads/master/dataset/indonesia.geojson"  # Ganti dengan path file GeoJSON Anda
gdf = gpd.read_file(geojson_file)

# 2. Data hasil clustering
# Change 'provinsi' column names to PascalCase
def to_pascal_case(name):
    parts = name.lower().split()
    return ' '.join(part.capitalize() for part in parts)

main_df['Provinsi'] = main_df['Provinsi'].apply(to_pascal_case)

prov_name = {
    "Dki Jakarta": "Jakarta Raya",
    "Kep. Bangka Belitung": "Bangka-Belitung",
    "Kep. Riau": "Kepulauan Riau",
    "Di Yogyakarta": "Yogyakarta",
}
main_df['Provinsi'].replace(prov_name, inplace=True)

# Contoh data clustering
data = {
    # "provinsi": ["Jawa Barat", "Jawa Timur", "DKI Jakarta", "Bali", "Papua"],  # Nama provinsi
    "provinsi": main_df['Provinsi'].tolist(),  # Nama provinsi
    "cluster": features['Cluster'].tolist(),  # Hasil clustering
}
df = pd.DataFrame(data)

# 3. Gabungkan GeoDataFrame dengan data clustering
gdf = gdf.merge(df, left_on="state", right_on="provinsi", how="left")  # 'NAME_1' disesuaikan dengan atribut GeoJSON

# 4. Konversi GeoDataFrame ke GeoJSON
gdf_json = gdf.to_json()

# 5. Membuat peta interaktif
m = folium.Map(location=[-2.5489, 118.0149], zoom_start=5)  # Lokasi tengah Indonesia

# 6. Tambahkan peta hasil clustering
folium.Choropleth(
    geo_data=gdf_json,
    data=df,
    columns=["provinsi", "cluster"],
    key_on="feature.properties.state",  # Ganti dengan nama kolom provinsi di GeoJSON
    fill_color="YlGnBu",  # Skema warna
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Cluster"
).add_to(m)

for index, row in gdf.iterrows():
  folium.Marker(
      location=[row.geometry.centroid.y, row.geometry.centroid.x],
      popup=f"{row['provinsi']}, Cluster: {row['cluster']}",
  ).add_to(m)


# 7. Simpan dan tampilkan peta
m.save("peta_clustering.html")
m